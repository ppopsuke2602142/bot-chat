from flask import Flask, request, abort
from linebot import LineBotApi, WebhookHandler
from linebot.exceptions import InvalidSignatureError
from linebot.models import MessageEvent, TextMessage, TextSendMessage
from apscheduler.schedulers.background import BackgroundScheduler
import datetime

app = Flask(__name__)

LINE_CHANNEL_ACCESS_TOKEN = '4FQh/agWm1UzEWeUSud+or4blbGIS423Y2vK0RveR4Ozlg9bb5JZosyxvsfMB9TsHFnjVMpfjOwO+mC66/6++yTJrj7sPrlsOo/4XxcgDcR4yffZY/nKFw8x+9WN8R24OWww3C6cxi//lMBzDkGdlgdB04t89/1O/w1cDnyilFU='
LINE_CHANNEL_SECRET = 'cacdf50f6db26a04128efda01f19ae00'

line_bot_api = LineBotApi(LINE_CHANNEL_ACCESS_TOKEN)
handler = WebhookHandler(LINE_CHANNEL_SECRET)

# Task List (‡πÄ‡∏Å‡πá‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÉ‡∏ô‡∏´‡∏ô‡πà‡∏ß‡∏¢‡∏Ñ‡∏ß‡∏≤‡∏°‡∏à‡∏≥)
task_list = [
    {"id": 1, "task": "download file", "done": False},
    {"id": 2, "task": "A1.5", "done": False},
    {"id": 3, "task": "A1.6", "done": False},
    {"id": 4, "task": "F1", "done": False},
    {"id": 5, "task": "F1.6", "done": False},
    {"id": 6, "task": "F1.8", "done": False},
    {"id": 7, "task": "F3", "done": False},
]

@app.route("/callback", methods=['POST'])
def callback():
    signature = request.headers['X-Line-Signature']
    body = request.get_data(as_text=True)

    try:
        handler.handle(body, signature)
    except InvalidSignatureError:
        abort(400)

    return 'OK'

# ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏ä‡πà‡∏ß‡∏¢‡πÅ‡∏õ‡∏•‡∏á Task List ‡πÄ‡∏õ‡πá‡∏ô‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°
def format_task_list():
    if not task_list:
        return "‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏á‡∏≤‡∏ô‡πÉ‡∏ô Task List"
    result = "‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏á‡∏≤‡∏ô:\n"
    for task in task_list:
        status = "‚úÖ" if task["done"] else "‚ùå"
        result += f'{task["id"]}. {task["task"]} [{status}]\n'
    return result

# ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô‡∏ó‡∏∏‡∏Å‡∏ß‡∏±‡∏ô‡∏à‡∏±‡∏ô‡∏ó‡∏£‡πå
def send_monday_reminder():
    try:
        message = "‡∏≠‡∏¢‡πà‡∏≤‡∏•‡∏∑‡∏°‡πÇ‡∏´‡∏•‡∏î‡πÑ‡∏ü‡∏•‡πå Order üöÄ"
        # ‡∏™‡πà‡∏á‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡πÑ‡∏õ‡∏¢‡∏±‡∏á‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏´‡∏£‡∏∑‡∏≠‡∏Å‡∏•‡∏∏‡πà‡∏° (‡πÉ‡∏ä‡πâ User ID ‡∏´‡∏£‡∏∑‡∏≠ Group ID)
        line_bot_api.broadcast(TextSendMessage(text=message))
        print(f"[{datetime.datetime.now()}] Reminder sent successfully.")
    except Exception as e:
        print(f"Error sending reminder: {e}")

# ‡∏ï‡∏±‡πâ‡∏á Scheduler ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô
scheduler = BackgroundScheduler()
scheduler.add_job(send_monday_reminder, 'cron', day_of_week='mon', hour=9, minute=0)  # ‡∏ó‡∏∏‡∏Å‡∏ß‡∏±‡∏ô‡∏à‡∏±‡∏ô‡∏ó‡∏£‡πå ‡πÄ‡∏ß‡∏•‡∏≤ 9:00 ‡∏ô.
scheduler.start()

# ‡∏ô‡∏¥‡∏¢‡∏≤‡∏°‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö Task
def check_all_tasks_completed():
    # ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤ task_list ‡∏ó‡∏∏‡∏Å‡∏á‡∏≤‡∏ô‡∏°‡∏µ‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞ `done` ‡πÄ‡∏õ‡πá‡∏ô True ‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
    return all(task["done"] for task in task_list)

@handler.add(MessageEvent, message=TextMessage)
def handle_message(event):
    user_message = event.message.text.strip().lower()

    if user_message == "list task":
        reply = format_task_list()
    elif user_message.startswith("done"):
        try:
            task_id = int(user_message.split()[1])
            for task in task_list:
                if task["id"] == task_id:
                    task["done"] = True
                    reply = f'‡∏á‡∏≤‡∏ô "{task["task"]}" ‡πÄ‡∏™‡∏£‡πá‡∏à‡πÅ‡∏•‡πâ‡∏ß! üéâ'
                    
                    # ‡πÄ‡∏£‡∏µ‡∏¢‡∏Å‡πÉ‡∏ä‡πâ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞ Task ‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î
                    if check_all_tasks_completed():
                        reply += "\n\nüéâ Order complete ‚úÖ"
                    break
            else:
                reply = f"‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏á‡∏≤‡∏ô‡∏ó‡∏µ‡πà‡∏°‡∏µ‡∏´‡∏°‡∏≤‡∏¢‡πÄ‡∏•‡∏Ç {task_id}"
        except (IndexError, ValueError):
            reply = "‡πÇ‡∏õ‡∏£‡∏î‡∏£‡∏∞‡∏ö‡∏∏‡∏´‡∏°‡∏≤‡∏¢‡πÄ‡∏•‡∏Ç‡∏á‡∏≤‡∏ô‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏ó‡∏≥‡πÄ‡∏Ñ‡∏£‡∏∑‡πà‡∏≠‡∏á‡∏´‡∏°‡∏≤‡∏¢ ‡πÄ‡∏ä‡πà‡∏ô: done 1"
    else:
        reply = "‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á‡∏ó‡∏µ‡πà‡πÉ‡∏ä‡πâ‡πÑ‡∏î‡πâ:\n- list task\n- add task <‡∏á‡∏≤‡∏ô>\n- done <‡∏´‡∏°‡∏≤‡∏¢‡πÄ‡∏•‡∏Ç>\n- delete task <‡∏´‡∏°‡∏≤‡∏¢‡πÄ‡∏•‡∏Ç>"

    line_bot_api.reply_message(
        event.reply_token,
        TextSendMessage(text=reply)
    )

if __name__ == "__main__":
    app.run()
